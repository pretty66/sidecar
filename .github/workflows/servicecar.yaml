name: servicecar

on:
  schedule:
    - cron: '00 23 * * *'
  push:
    branches:
      - master
      - release-*
      - feature/*
    tags:
      - v*
  pull_request:
    branches:
      - master
      - release-*
      - feature/*
jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ${{ matrix.os }}
    env:
      GOVER: 1.17
      GOLANGCILINT_VER: v1.45.2
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      ARCHIVE_OUTDIR: dist/archives
      TEST_OUTPUT_FILE_PREFIX: test_report
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-2019, macOS-latest ]
        target_arch: [ arm, arm64, amd64 ]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: windows-2019
            target_os: windows
          - os: macOS-latest
            target_os: darwin
        exclude:
          - os: windows-2019
            target_arch: arm
          - os: windows-2019
            target_arch: arm64
          - os: macOS-latest
            target_arch: arm
    steps:
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}
      - name: Install Docker CE for buildx
        if: matrix.target_os == 'linux' && github.event_name != 'pull_request'
        run: |
          sudo apt update
          sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt update
          sudo apt install docker-ce
          docker -v
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Parse release version and set REL_VERSION
        run: python ./.github/scripts/get_release_version.py ${{ github.event_name }}
      - name: Check white space in .md files
        if: matrix.target_os == 'linux' && github.event_name == 'pull_request'
        run: |
          TRAILING_WHITESPACE=0
          # only check changed docs in pr
          for file in $(git diff --cached --name-only --diff-filter=ACRMTU $GITHUB_BASE_REF | grep "\.md"); do
            if grep -r '[[:blank:]]$' "$1" > /dev/null; then
              echo "trailing whitespace: ${1}" >&2
              ERRORS=yes
              ((TRAILING_WHITESPACE=TRAILING_WHITESPACE+1))
            fi
          done
          if [[ -n "$ERRORS" ]]; then
            echo >&2
            echo "ERRORS found" >&2
            echo "${TRAILING_WHITESPACE} files with trailing whitespace" >&2
            echo >&2
            exit 1
          fi
      - name: golangci-lint
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        uses: golangci/golangci-lint-action@v3.1.0
        with:
          version: ${{ env.GOLANGCILINT_VER }}
      - name: Run go mod tidy check diff
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        run: make modtidy check-diff
      - name: Run make test
        env:
          COVERAGE_OPTS: "-coverprofile=coverage.txt -covermode=atomic"
        if: matrix.target_arch == 'amd64'
        run: make test
      #      - name: Codecov
      #        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
      #        uses: codecov/codecov-action@v1
      - name: Run make release to build and archive binaries
        run: |
          mkdir -p ${{ env.ARCHIVE_OUTDIR }}
          make release GOOS=${{ matrix.target_os }} GOARCH=${{ matrix.target_arch }} ARCHIVE_OUT_DIR=${{ env.ARCHIVE_OUTDIR }}
      - name: upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: dapr_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: ${{ env.ARCHIVE_OUTDIR }}
      - name: docker login
        if: matrix.target_os != 'darwin' && github.event_name != 'pull_request'
        run: |
          docker login -u ${{ secrets.DOCKER_REGISTRY_ID }} -p ${{ secrets.DOCKER_REGISTRY_PASS }}
      #      - name: Build and push docker images
      #        if: matrix.target_os != 'darwin' && github.event_name != 'pull_request'
      #        run: |
      #          echo "Build docker image and push image..."
      #          make docker-push TARGET_OS=${{ matrix.target_os }} TARGET_ARCH=${{ matrix.target_arch }} DAPR_REGISTRY=${{ secrets.DOCKER_REGISTRY }} DAPR_TAG=${{ env.REL_VERSION }}
      #      - name: GitHub container registry login
      #        if: matrix.target_os != 'darwin' && github.event_name != 'pull_request'
      #        uses: docker/login-action@v1
      #        with:
      #          registry: ghcr.io
      #          username: ${{ github.repository_owner }}
      #          password: ${{ secrets.GITHUB_TOKEN }}
      #      - name: Build and push docker images to GitHub container registry
      #        if: matrix.target_os != 'darwin' && github.event_name != 'pull_request'
      #        run: |
      #          echo "Build docker image and push image..."
      #          make docker-push TARGET_OS=${{ matrix.target_os }} TARGET_ARCH=${{ matrix.target_arch }} DAPR_REGISTRY=ghcr.io/${{ github.repository_owner }} DAPR_TAG=${{ env.REL_VERSION }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push nightly
        uses: docker/build-push-action@v3
        if: contains(env.REL_VERSION, 'nightly')
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: openmsp/servicecar:${{ env.REL_VERSION }}
      - name: Build and push release
        uses: docker/build-push-action@v3
        if: !contains(env.REL_VERSION, 'nightly')
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: openmsp/servicecar:latest,openmsp/servicecar:${{ env.REL_VERSION }}
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.target_os }}_${{ matrix.target_arch }}_test_unit.json
          path: ${{ env.TEST_OUTPUT_FILE_PREFIX }}_unit.json
